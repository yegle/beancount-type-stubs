# Stubs for beancount.core.realization (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Iterable, List, Dict, Union, Callable, Tuple, TypeVar, IO

from beancount.core.data import TxnPosting
from beancount.core.inventory import Inventory
from beancount.core.data import Posting
from beancount.core.display_context import DisplayFormatter

Directive = Any

class RealAccount(dict):
    account = ...  # type: str
    txn_postings = ...  # type: TxnPosting
    balance = ...  # type: Inventory
    def __init__(self, account_name: str, *args: Any, **kwargs: Any) -> None: ...
    def __setitem__(self, key: str, value: RealAccount): ...
    def copy(self) -> RealAccount: ...
    def __eq__(self, other: RealAccount) -> bool: ...
    def __ne__(self, other: RealAccount) -> bool: ...

def iter_children(real_account: RealAccount, leaf_only: bool = ...) -> Iterable[RealAccount]: ...
def get(real_account: RealAccount, account_name: str, default: Optional[RealAccount] = ...) -> RealAccount: ...
def get_or_create(real_account: RealAccount, account_name: str) -> RealAccount: ...
def contains(real_account: RealAccount, account_name: str) -> bool: ...
def realize(entries: List[Directive], min_accounts: Optional[List[str]] = ..., compute_balance: bool = ...) -> RealAccount: ...
def postings_by_account(entries: List[Directive]) -> Dict[str, Union[TxnPosting, Directive]]: ...
def filter(real_account: RealAccount, predicate: Callable[[RealAccount], bool]) -> RealAccount: ...
def get_postings(real_account: RealAccount) -> List[TxnPosting]: ...
def iterate_with_balance(txn_postings: List[TxnPosting]) -> Iterable[Tuple[Directive, List[Posting], Inventory, Inventory]]: ...
def compute_balance(real_account: RealAccount) -> Inventory: ...
def find_last_active_posting(txn_postings: List[TxnPosting]) -> TxnPosting: ...

T = TypeVar('T')
V = TypeVar('V')

def index_key(sequence: Iterable[T], value: V, key: Callable[[T], V], cmp: Callable[[V, V], bool]) -> int: ...
def dump(root_account: RealAccount) -> (str, str, RealAccount): ...

PREFIX_CHILD_1 = ...  # type: str
PREFIX_CHILD_C = ...  # type: str
PREFIX_LEAF_1 = ...  # type: str
PREFIX_LEAF_C = ...  # type: str

def dump_balances(real_account: RealAccount, dformat: DisplayFormatter, at_cost: bool = ..., fullnames: bool = ..., file: Optional[IO] = ...) -> str: ...
def compute_postings_balance(txn_postings: List[TxnPosting]) -> Inventory: ...
