# Stubs for beancount.core.interpolate (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, NamedTuple, Dict, List, Tuple
from decimal import Decimal
from datetime import date

from beancount.core.amount import mul as amount_mul
from beancount.core.data import Posting, Transaction
from beancount.core.amount import Amount
from beancount.core.inventory import Inventory

METADATA = Dict[str, Any]
Directive = Any

LEGACY_DEFAULT_TOLERANCES = ...  # type: Dict[str, Decimal]
MAXIMUM_TOLERANCE = ...  # type: Decimal
MAX_TOLERANCE_DIGITS = ...  # type: int

def is_tolerance_user_specified(tolerance: Decimal) -> bool: ...

BalanceError = NamedTuple('BalanceError', [
    ('source', METADATA),
    ('message', str),
    ('entry', Directive),
])

def get_posting_weight(posting: Posting) -> Amount: ...
def compute_cost_basis(postings: List[Posting]) -> Inventory: ...
def has_nontrivial_balance(posting: Posting) -> bool: ...
def compute_residual(postings: Posting) -> Inventory: ...
def infer_tolerances(postings: List[Posting], options_map: Dict[str, Any], use_cost: Optional[bool] = ...) -> Dict[str, Decimal]: ...

AUTOMATIC_META = ...  # type: str
AUTOMATIC_RESIDUAL = ...  # type: str

def get_residual_postings(residual: Inventory, account_rounding: str) -> List[Posting]: ...
def fill_residual_posting(entry: Transaction, account_rounding: str) -> Transaction: ...
def get_incomplete_postings(entry: Directive, options_map: Dict[str, Any]) -> Tuple[List[Posting], bool, List[BalanceError], Dict[str, Decimal]]: ...
def balance_incomplete_postings(entry: Directive, options_map: Dict[str, Any]) -> Optional[List[BalanceError]]: ...
def compute_entries_balance(entries: List[Directive], prefix: Optional[str] = ..., date: Optional[date] = ...) -> Inventory: ...
def compute_entry_context(entries: List[Directive], context_entry: Directive) -> Tuple[Dict[str, Inventory], Dict[str, Inventory]]: ...
