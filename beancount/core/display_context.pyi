# Stubs for beancount.core.display_context (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Dict
from decimal import Decimal

from beancount.core.distribution import Distribution
from beancount.utils import misc_utils

class Precision(misc_utils.Enum):
    MOST_COMMON = ...  # type: int
    MAXIMUM = ...  # type: int

class Align(misc_utils.Enum):
    NATURAL = ...  # type: int
    DOT = ...  # type: int
    RIGHT = ...  # type: int

class _CurrencyContext:
    has_sign = ...  # type: bool
    integer_max = ...  # type: int
    fractional_dist = ...  # type: Distribution
    def __init__(self) -> None: ...
    def update(self, number: Optional[Decimal]) -> Optional[Decimal]: ...
    def get_fractional(self, precision: Precision) -> Decimal: ...

class DisplayContext:
    ccontexts = ...  # type: Dict[str, CurrencyContext]
    commas = ...  # type: bool
    def __init__(self) -> None: ...
    def set_commas(self, commas: bool) -> None: ...
    def update(self, number: Decimal, currency: str = ...) -> None: ...
    def quantize(self, number: Decimal, currency: str, precision: Precision = ...) -> Decimal: ...
    def build(self, alignment: Align = ..., precision: Precision = ..., commas: Optional[bool] = ..., reserved: int = ...) -> 'DisplayFormatter': ...
    DEFAULT_UNINITIALIZED_PRECISION = ...  # type: int

class DisplayFormatter:
    dcontext = ...  # type: DisplayContext
    precision = ...  # type: Precision
    fmtstrings = ...  # type: Dict[str, str]
    fmtfuncs = ...  # type: Dict[str, Callable[[Decimal], str]]
    def __init__(self, dcontext: DisplayContext, precision: Precision, fmtstrings: Dict[str, str]) -> None: ...
    def format(self, number: Decimal, currency: str = ...) -> str: ...
    def quantize(self, number: Decimal, currency: str = ...) -> Decimal: ...
    __call__ = ...  # type: Callable[[str], str]

DEFAULT_DISPLAY_CONTEXT = ...  # type: DisplayContext
DEFAULT_FORMATTER = ...  # type: DisplayFormatter
