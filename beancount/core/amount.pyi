# Stubs for beancount.core.amount (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Union, Tuple, Callable
from decimal import Decimal

from beancount.core.display_context import DisplayFormatter

ONE = ...  # type: Decimal
HALF = ...  # type: Decimal
decimal = ...  # type: Decimal

def D(string: Optional[Union[str, Decimal]]) -> Decimal: ...
def round_to(number: Decimal, increment: Decimal) -> Decimal: ...

CURRENCY_RE = ...  # type: str

class Amount:
    valid_types_number = ...  # type: Any
    valid_types_currency = ...  # type: Any
    number = ...  # type: Decimal
    currency = ...  # type: str
    def __init__(self, number: Decimal, currency: str) -> None: ...
    def to_string(self, dformat: DisplayFormatter = ...) -> str: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __hash__(self) -> bool: ...
    def __neg__(self) -> bool: ...
    @staticmethod
    def from_string(string: str) -> 'Amount': ...

def sortkey(amount: Amount) -> Tuple[str, Decimal]: ...
def mul(amount: Amount, number: Decimal) -> Amount: ...
def div(amount: Amount, number: Decimal) -> Amount: ...
def add(amount1: Amount, amount2: Amount) -> Amount: ...
def sub(amount1: Amount, amount2: Amount) -> Amount: ...
def abs(amount: Amount) -> Amount: ...

A = ...  # type: Callable[[str], Amount]

from_string = ...  # type: Callable[[str], Amount]
NULL_AMOUNT = ...  # type: Amount
amount_add = ...  # type: Callable[[Amount, Amount], Amount]
amount_sub = ...  # type: Callable[[Amount, Amount], Amount]
amount_mul = ...  # type: Callable[[Amount, Decimal], Amount]
amount_div = ...  # type: Callable[[Amount, Decimal], Amount]
