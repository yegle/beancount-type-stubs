# Stubs for beancount.core.position (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, NamedTuple, Union, Tuple
from datetime import date
from decimal import Decimal

from beancount.core.amount import Amount
from beancount.core.data import Posting
from beancount.core.display_context import DisplayFormatter

Cost = NamedTuple('Cost', [
    ('number', Decimal),
    ('currency', str),
    ('date', date),
    ('label', Optional[str]),
])

CostSpec = NamedTuple('CostSpec', [
    ('number_per', Decimal),
    ('number_total', Decimal),
    ('currency', str),
    ('date', Optional[date]),
    ('label', Optional[str]),
    ('merge', bool),
])

def cost_to_str(cost: Union[Cost, CostSpec], dformat: DisplayFormatter, detail: bool = ...) -> str: ...

CURRENCY_ORDER = ...  # type: Dict[str, int]
NCURRENCIES = ...  # type: int

def get_position(posting: Posting) -> 'Position': ...
def to_string(pos: Union['Position', Posting], dformat: DisplayFormatter = ..., detail: bool = ...) -> str: ...

class Position:
    cost_types = ...  # type: Any
    units = ...  # type: Amount
    cost = ...  # type: Optional[Cost]
    def __init__(self, units: Amount, cost: Optional[Union[Cost, CostSpec]] = ...) -> None: ...
    def __hash__(self) -> int: ...
    def to_string(self, dformat: DisplayFormatter = ..., detail: bool = ...) -> str: ...
    def __eq__(self, other: Optional[Position]) -> bool: ...
    def sortkey(self) -> Tuple[int, Decimal, str, Decimal]: ...
    def __lt__(self, other) -> bool: ...
    def __copy__(self) -> Position: ...
    def set_units(self, units: Amount) -> None: ...
    def currency_pair(self) -> Optional[Tuple[str, str]]: ...
    def get_cost(self) -> Amount: ...
    def at_cost(self) -> Position: ...
    def add(self, number: Decimal) -> None: ...
    def get_negative(self) -> Position: ...
    __neg__ = ...  # type: Callable[[Position], Position]
    def __mul__(self, scalar: Decimal) -> Position: ...
    def is_negative_at_cost(self) -> bool: ...
    @staticmethod
    def from_string(string: str) -> Position: ...
    @staticmethod
    def from_amounts(units: Amount, cost_amount: Optional[Amount] = ...) -> Position: ...

from_string = ...  # type: Callable[[str], Position]
from_amounts = ...  # type: Callable[[str], Position]
